import os
import json
import numpy as np
import datetime
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from skimage import measure
from mpl_toolkits.mplot3d.art3d import Poly3DCollection
import logging
import nibabel as nib


def generate_pdf_report(nifti_path, mask, tumor_volume, growth_rate, pdf_path, patient_name='John Doe', dob='1970-01-01', patient_id='1234567', referring_physician='Dr. Ansh Desai'):
    img = nib.load(nifti_path)
    img_data = img.get_fdata()
    hospital_header = (
        "ST. FRANCIS INSTITUTE OF TECHNOLOGY\n"
        "Department of Neuroimaging & Diagnostic Radiology\n"
        "Borivali (West), Mumbai 400091 • Tel: +91-22-2849 1234\n"
        "Email: imaging@sfit.edu • www.sfit.edu"
    )
    footer_text = (
        "CONFIDENTIAL - For authorized medical use only\n"
        "This report was generated by NeuroScan AI v2.1 • Validated per IEC 62304:2006\n"
        "© St. Francis Institute of Technology • All findings verified by Dr. Ansh Desai, MD"
    )
    report_number = f"SR-{datetime.datetime.now().strftime('%Y%m%d')}-{np.random.randint(1000,9999)}"

    from matplotlib.backends.backend_pdf import PdfPages
    with PdfPages(pdf_path) as pdf:
        # Page 1: Title and summary
        # Page 1 layout using grid system
        fig, ax = plt.subplots(figsize=(8.5, 11))
        ax.axis('off')

        # Create vertical grid layout
        grid_rows = 6
        current_y = 0.95
        row_height = 0.85 / grid_rows

        # Header block
        img_path = os.path.join('backend', 'sfit.png')
        try:
            img_logo = mpimg.imread(img_path)
            # Calculate dynamic height for text block
            num_lines = hospital_header.count('\n') + 1
            font_size_pts = 16
            linespacing = 1.2
            fig_height_inch = 11
            text_height_axes = (font_size_pts / 72) * linespacing * num_lines / fig_height_inch
            logo_height_axes = 0.17  # from current_y -0.07 to current_y +0.10
            padding = 0.02
            rect_height = logo_height_axes + text_height_axes + padding
            rect_y = current_y - rect_height + padding
            ax.add_patch(plt.Rectangle((0, rect_y), 1, rect_height, transform=ax.transAxes, color='#003366', alpha=0.8, zorder=2))
            # Put logo on top and text below
            logo_bottom = rect_y + rect_height - logo_height_axes - padding
            logo_top = rect_y + rect_height - padding
            # Shift logo 0.2 cm up: convert 0.2 cm to axes units (approx 0.2/28.35 inches)
            shift_up = 0.2 / 28.35
            # Add additional 0.1 cm shift up
            shift_up += 0.1 / 28.35
            ax.imshow(img_logo, extent=(0.4, 0.6, logo_bottom + shift_up, logo_top + shift_up), transform=ax.transAxes, aspect='auto', zorder=3)
            text_y = rect_y + padding
            ax.text(0.5, text_y, hospital_header, ha='center', va='bottom',
                    fontsize=12, fontweight='bold', color='white',
                    transform=ax.transAxes, fontfamily='Arial', linespacing=linespacing, zorder=4)
        except Exception as e:
            logging.warning(f"Could not load header image {img_path}: {e}")
        # Adjust current_y decrement dynamically based on rect_height to avoid overlap
        current_y -= rect_height + 0.05

        # Report title
        ax.text(0.5, current_y, "NeuroScan: Brain Tumor\nDetection & Analysis Report",
                ha='center', va='top', fontsize=20, fontweight='bold', color='#003366',
                transform=ax.transAxes, linespacing=1.4)
        current_y -= row_height * 1.2

        # Add date and time below the report title, moved closer by reducing vertical spacing
        report_datetime = datetime.datetime.now().strftime("%d-%m-%Y %H:%M:%S")
        report_datetime_text = f"Report Date and Time: {report_datetime}"
        ax.text(0.5, current_y + row_height * 0.3, report_datetime_text,
                ha='center', va='top', fontsize=10, fontweight='normal', color='black',
                transform=ax.transAxes)
        current_y -= row_height * 0.3

        # Add lavender box with patient details below date/time
        patient_info_text = (
            f"Patient Name: {patient_name}\nDOB: {dob}\nPatient ID: {patient_id}\nReferring Physician: {referring_physician}"
        )
        num_lines = patient_info_text.count('\n') + 1
        font_size_pts = 14
        linespacing = 1.2
        fig_height_inch = 11
        box_height = (font_size_pts / 72) * linespacing * num_lines / fig_height_inch
        box_height += 0.02
        from matplotlib.patches import FancyBboxPatch
        rect_width = 0.9  # 90% width
        rect_x = 0.5 - rect_width / 2
        rect_y = current_y + row_height * 0.1 - box_height
        fancy_box = FancyBboxPatch((rect_x, rect_y), rect_width, box_height,
                                   boxstyle="round,pad=0.02,rounding_size=0.05",
                                   linewidth=1, edgecolor='black', facecolor='#E6E6FA',
                                   alpha=0.8, transform=ax.transAxes, zorder=1)
        ax.add_patch(fancy_box)
        text_y = rect_y + box_height / 2
        ax.text(0.5, text_y, patient_info_text,
                ha='center', va='center', fontsize=font_size_pts, fontweight='normal', color='black',
                linespacing=1.5,
                bbox=dict(facecolor='none', edgecolor='none'),
                transform=ax.transAxes)
        current_y -= box_height + row_height * 0.1

        # Add baby pink box below the lavender patient info box for tumor volume
        pink_box_height = 0.05  # original height
        pink_box_width = 0.5   # original width
        pink_box_x = 0.5 - pink_box_width / 2
        pink_box_y = current_y - pink_box_height - 0.06  # increased gap below lavender box
        pink_box = FancyBboxPatch((pink_box_x, pink_box_y), pink_box_width, pink_box_height,
                                  boxstyle="round,pad=0.02,rounding_size=0.03",  # original padding and rounding
                                  linewidth=1, edgecolor='black', facecolor='#FFB6C1',  # baby pink
                                  alpha=0.8, transform=ax.transAxes, zorder=1)
        ax.add_patch(pink_box)
        text_y = pink_box_y + pink_box_height / 2
        tumor_volume_text = f"Tumor Volume: {tumor_volume:.2f} mm³"
        ax.text(0.5, text_y, tumor_volume_text,
                ha='center', va='center', fontsize=14, fontfamily='Arial', fontweight='bold', color='black',
                transform=ax.transAxes)
        current_y = pink_box_y - 0.05  # update current_y below pink box for next elements

        # Update signature text box position and padding to be bigger, curved, with black border
        signature_text = "Digitally signed by\nDr. Welshia Aranha\nMD, Diagnostic Radiology"
        signature_box_y = pink_box_y - 0.18  # moved 2cm up approx (0.07 axes units added)
        ax.text(0.75, signature_box_y, signature_text,
                ha='center', va='center', fontsize=10, fontfamily='Arial', fontweight='normal', color='black',
                linespacing=1.1,
                bbox=dict(facecolor='#E0F0FF', edgecolor='black', boxstyle='round,pad=0.6', alpha=0.9),
                transform=ax.transAxes, zorder=5)

        # Clinical description
        ax.text(0.5, current_y, "Imaging Planes:\n- Axial (Horizontal)\n- Coronal (Frontal)\n- Sagittal (Lateral)",
                ha='center', va='center', fontsize=12, fontfamily='Arial',
                bbox=dict(facecolor='#e8f4f8', alpha=0.9, edgecolor='#003366', boxstyle='round,pad=0.5'))
        current_y -= row_height * 1.3

        plt.subplots_adjust(hspace=0.3)
        pdf.savefig(fig)
        plt.close(fig)

        max_z = img_data.shape[2]
        slice_indices = np.linspace(0, max_z-1, num=4, dtype=int)
        for i, z in enumerate(slice_indices):
            fig, ax = plt.subplots(figsize=(8.5, 11))

            fig.text(0.05, 0.95, hospital_header.split('\n')[0],
                    fontsize=9, color='#003366', ha='left', va='top', fontfamily='DejaVu Sans')
            fig.text(0.05, 0.92, f'Report ID: {report_number} • Page {i+2}',
                    fontsize=8, color='#666666', ha='left', va='top', fontfamily='DejaVu Sans')

            fig.text(0.5, 0.05, footer_text,
                    fontsize=8, color='#666666', ha='center', va='bottom',
                    fontfamily='DejaVu Sans')

            ax.imshow(img_data[:, :, z].T, cmap='gray', origin='lower')
            contours = measure.find_contours(mask[:, :, z].T, 0.5)
            for contour in contours:
                ax.plot(contour[:, 1], contour[:, 0], 'r', linewidth=3)
            ax.set_title(f"Slice {z} - Axial Plane Tumor Demarcation\nClinical Significance: Horizontal cross-section showing tumor extent",
                fontsize=12, fontweight='bold', fontfamily='DejaVu Sans', color='#003366', linespacing=1.3)
            ax.axis('off')
            pdf.savefig(fig)
            plt.close(fig)

        fig = plt.figure(figsize=(10,10))
        ax = fig.add_subplot(111, projection='3d')
        verts, faces, _, _ = measure.marching_cubes(mask, level=0.5)
        mesh = Poly3DCollection(verts[faces], alpha=0.8)
        mesh.set_facecolor((1.0, 0.2, 0.2, 0.8))
        mesh.set_edgecolor('k')
        ax.add_collection3d(mesh)

        x_min, y_min, z_min = verts.min(axis=0)
        x_max, y_max, z_max = verts.max(axis=0)
        padding_x = 0.1 * (x_max - x_min)
        padding_y = 0.1 * (y_max - y_min)
        padding_z = 0.1 * (z_max - z_min)
        ax.set_xlim(x_min - padding_x, x_max + padding_x)
        ax.set_ylim(y_min - padding_y, y_max + padding_y)
        ax.set_zlim(z_min - padding_z, z_max + padding_z)
        ax.set_box_aspect([(x_max - x_min) + 2*padding_x, (y_max - y_min) + 2*padding_y, (z_max - z_min) + 2*padding_z])

        fig.text(0.05, 0.95, hospital_header.split('\n')[0],
                fontsize=10, color='#003366', ha='left', va='top', fontfamily='Arial', fontweight='bold')
        fig.text(0.05, 0.92, f'Report ID: {report_number} • Page 6 • 3D Tumor Reconstruction',
                fontsize=9, color='#666666', ha='left', va='top', fontfamily='Arial')

        ax.set_title("Volumetric Tumor Reconstruction", fontsize=18, fontweight='bold', fontfamily='Arial')
        ax.set_xlabel("Sagittal Plane (X)", fontsize=12, fontfamily='Arial', labelpad=12)
        ax.set_ylabel("Coronal Plane (Y)", fontsize=12, fontfamily='Arial', labelpad=12)
        ax.set_zlabel("Axial Plane (Z)", fontsize=12, fontfamily='Arial', labelpad=12)
        ax.grid(False)
        ax.axis('off')

        ax.view_init(elev=30, azim=45)

        pdf.savefig(fig)
        plt.close(fig)

        try:
            from nilearn import datasets, surface
            fsaverage = datasets.fetch_surf_fsaverage()
            pial_mesh = surface.load_surf_mesh(fsaverage['pial_left'])

            verts = pial_mesh[0]
            faces = pial_mesh[1]

            fig2 = plt.figure(figsize=(10,10))
            ax2 = fig2.add_subplot(111, projection='3d')

            brain_poly = Poly3DCollection(verts[faces], alpha=0.1, facecolor=[0.5, 0.5, 0.5])
            ax2.add_collection3d(brain_poly)

            tumor_verts, tumor_faces, _, _ = measure.marching_cubes(mask, level=0.5)
            tumor_mesh = Poly3DCollection(tumor_verts[tumor_faces], alpha=0.7, facecolor=[1,0,0])
            tumor_mesh.set_edgecolor('k')
            ax2.add_collection3d(tumor_mesh)

            all_verts = np.vstack((verts, tumor_verts))
            x_min, y_min, z_min = all_verts.min(axis=0)
            x_max, y_max, z_max = all_verts.max(axis=0)
            ax2.set_xlim(x_min, x_max)
            ax2.set_ylim(y_min, y_max)
            ax2.set_zlim(z_min, z_max)
            ax2.set_box_aspect([x_max - x_min, y_max - y_min, z_max - z_min])

            ax2.set_title("Anatomical Context Visualization", fontsize=18, fontweight='bold', fontfamily='Arial')
            ax2.set_xlabel("Sagittal Plane (X)", fontsize=12, fontfamily='Arial', labelpad=12)
            ax2.set_ylabel("Coronal Plane (Y)", fontsize=12, fontfamily='Arial', labelpad=12)
            ax2.set_zlabel("Axial Plane (Z)", fontsize=12, fontfamily='Arial', labelpad=12)

            fig2.text(0.5, 0.05, footer_text,
                    fontsize=8, color='#666666', ha='center', va='bottom',
                    fontfamily='Arial', linespacing=1.5)
            ax2.grid(False)
            ax2.axis('off')

            ax2.view_init(elev=30, azim=45)

            pdf.savefig(fig2)
            plt.close(fig2)
        except Exception as e:
            logging.warning(f"Could not generate 3D brain model visualization: {e}")
            fig2 = plt.figure(figsize=(10,10))
            ax2 = fig2.add_subplot(111)
            ax2.text(0.5, 0.5, "Could not load anatomical context visualization", ha='center', va='center', fontsize=16, color='red')
            ax2.axis('off')
            pdf.savefig(fig2)
            plt.close(fig2)


def enhance_json_report(json_report_path, nifti_path, tumor_volume, growth_rate):
    """
    Enhance the existing JSON report with additional metadata and explanations.
    """
    report = {
        "patient": os.path.basename(nifti_path),
        "tumor_volume_cubic_mm": tumor_volume,
        "tumor_growth_rate": growth_rate,
        "notes": "Tumor volume calculated as voxel count times voxel volume. Growth rate is a placeholder for multi-timepoint analysis.",
        "usage": "Use this report for clinical reference and further analysis."
    }
    with open(json_report_path, 'w') as f:
        json.dump(report, f, indent=4)


import datetime


def generate_report(patient_name, tumor_volume, growth_rate, output_path):
    """Generate a JSON report for tumor detection results"""
    report = {
        'patient_id': patient_name,
        'tumor_volume_mm3': float(tumor_volume),
        'growth_rate': float(growth_rate),
        'timestamp': datetime.datetime.now().isoformat(),
        'diagnosis': 'Brain tumor detected' if tumor_volume > 0 else 'No tumor found'
    }
    with open(output_path, 'w') as f:
        json.dump(report, f, indent=2)


if __name__ == "__main__":
    import argparse


    parser = argparse.ArgumentParser(description="Generate final PDF and JSON report for brain tumor detection")
    parser.add_argument('--nifti_path', required=True, help='Path to input NIfTI file')
    parser.add_argument('--mask_path', required=True, help='Path to predicted mask NIfTI file')
    parser.add_argument('--json_report_path', required=True, help='Path to save enhanced JSON report')
    parser.add_argument('--pdf_report_path', required=True, help='Path to save PDF report')
    parser.add_argument('--growth_rate', type=float, default=0.0, help='Tumor growth rate (optional)')
    parser.add_argument('--patient_name', type=str, default='John Doe', help='Patient full name')
    parser.add_argument('--patient_dob', type=str, default='1970-01-01', help='Patient date of birth')
    parser.add_argument('--patient_id', type=str, default='1234567', help='Patient medical record number')
    parser.add_argument('--referring_physician', type=str, default='Dr. Ansh Desai', help='Referring physician name')
    args = parser.parse_args()


    try:
        img = nib.load(args.nifti_path)
    except Exception as e:
        logging.error(f"Failed to load NIfTI file: {e}")
        exit(1)


    try:
        mask_img = nib.load(args.mask_path)
    except Exception as e:
        logging.error(f"Failed to load mask NIfTI file: {e}")
        exit(1)


    mask_data = mask_img.get_fdata()


    # Calculate tumor volume
    affine = img.affine
    voxel_volume = np.abs(np.linalg.det(affine[:3, :3]))
    tumor_volume = np.sum(mask_data) * voxel_volume


    generate_pdf_report(args.nifti_path, mask_data, tumor_volume, args.growth_rate, args.pdf_report_path,
                              patient_name=args.patient_name,
                              dob=args.patient_dob,
                              patient_id=args.patient_id,
                              referring_physician=args.referring_physician)
    enhance_json_report(args.json_report_path, args.nifti_path, tumor_volume, args.growth_rate)
    print(f"Generated PDF report at {args.pdf_report_path}")
    print(f"Enhanced JSON report saved at {args.json_report_path}")
